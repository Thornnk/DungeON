from char_old import *
from operator import attrgetter

CHAR = 'char_init_pos'

# Floors #
## Full floors ##
FFTf, FFPr, FFDe, FFGr, FFSn, FFIc = [TownFloor()], [PrairieFloor()], [DesertFloor()], [GrassFloor()], [SnowyFloor()], \
                                     [IcyFloor()]
## Tiled floors ##
FRf1, FSf1, FSm1 = [RockFloor1()], [SandFloor1()], [SandMound1()]

# Walls #
Wall = 'wall'   # Random suitable wall #
Wwr1, Wwr2, Wwr3, Wwr4 = [WallRock1()], [WallRock2()], [WallRock3()], [WallRock4()]

# Decorations #
DHo1, DHo2, DHo3, DHo4, DHo5, DHo6, DTow, DWel = \
	[House1()], [House2()], [House3()], [House4()], [House5()], [House6()], [Tower()], [Well()]
DMo2 = [Mountain2()]
DBu1, DBu2, DTr1, DTr2 = [Bush1()], [Bush2()], [Tree1()], [Tree2()]
DRo1 = [Rock1()]
DGr1, DGr2, DGr3 = [GrassyRock1()], [GrassyRock2()], [GrassyRock3()]

# Containers #
CoCh = [Chest()]

# Creatures #
CrRa, CrSn, CrYe = [Rat()], [Snake()], [Yeti()]


class Map:
	"""Main map generating class"""
	def __init__(self):

		self.name = None
		self.level = 0
		self.map_elements = sett.map_elements
		self.full_floor = None
		self.map_layout = None
		self.density_floors, self.density_decos, self.density_containers, self.density_creatures = 0, 0, 0, 0

		self.suitable_floors, self.suitable_walls, self.suitable_decos, self.suitable_containers, self.suitable_creatures = \
			[], [], [], [], {}
		self.sel_floor, self.sel_wall, self.sel_deco, self.sel_container, self.sel_creature = None, None, None, None, None
		self.free_floors = []
		self.sorted_objects = []
		self.blocking_objs = []
		self.buffer_spawn = []
		self.respawn_time = 5000
		self.paths_opened = {'north': None, 'south': None, 'west': None, 'east': None}
		self.coordinates = ()

	def suitable_mobj(self):
		"""Selects every suitable map object"""

		def select_suitable(input_list):
			"""Selects as suitable map object if at least 1 element (dirt, tropical...)
			of every aspect converges with map_elements"""

			output_list = []
			if len(input_list) > 0:
				for mobj in input_list:
					if mobj.type == 'floor':
						if mobj.tiled:
							valid_mobj = 0
							for map_aspct, map_elemnts in self.map_elements.items():
								for mobj_aspct, mobj_elemnts in mobj.map_elements.items():
									if map_aspct == mobj_aspct:
										for map_elemnt in map_elemnts:
											for mobj_elemnt in mobj_elemnts:
												if map_elemnt == mobj_elemnt:
													valid_mobj += 1
													break
											else:
												continue
											break
							if valid_mobj == len(mobj.map_elements.keys()):
								output_list.append(mobj)
					else:
						valid_mobj = 0
						for map_aspct, map_elemnts in self.map_elements.items():
							for mobj_aspct, mobj_elemnts in mobj.map_elements.items():
								if map_aspct == mobj_aspct:
									for map_elemnt in map_elemnts:
										for mobj_elemnt in mobj_elemnts:
											if map_elemnt == mobj_elemnt:
												valid_mobj += 1
												break
										else:
											continue
										break
						if valid_mobj == len(mobj.map_elements.keys()):
							output_list.append(mobj)
				return output_list
			else: raise ValueError('The input_list is empty')

		# Floors #
		self.suitable_floors.clear()
		self.suitable_floors = select_suitable(generic_floors)

		# Walls #
		self.suitable_walls.clear()
		self.suitable_walls = select_suitable(generic_walls)

		# Decorations #
		self.suitable_decos.clear()
		self.suitable_decos = select_suitable(generic_decos)

		# Containers #
		self.suitable_containers.clear()
		self.suitable_containers = select_suitable(generic_containers)

		# Creatures # (generated by weight)
		self.suitable_creatures.clear()
		for creature in generic_creatures:
			self.suitable_creatures[creature.name] = 0
			for creature_aspect, creature_elements in creature.affinities.items():
				for map_aspect, map_elmnts in self.map_elements.items():
					if creature_aspect == map_aspect:
						for creature_element in creature_elements:
							for map_elmnt in map_elmnts:
								if creature_element == map_elmnt:
									self.suitable_creatures[creature.name] += 1

	def gen_floors(self):
		"""Generates new random floors"""

		if len(self.suitable_floors) > 0:
			pickable_pos = []
			for row_index, row in enumerate(self.map_layout):
				for col_index, tile in enumerate(row):
					if type(tile) == list:
						if tile[0].name == 'blank_floor':
							pickable_pos.append((row_index, col_index))
					else:
						pickable_pos.append((row_index, col_index))

			while len(pickable_pos) > self.density_floors:
				del pickable_pos[r.randint(0, len(pickable_pos)-1)]

			for pos in pickable_pos:
				if type(self.map_layout[pos[0]][pos[1]]) == list:
					self.map_layout[pos[0]][pos[1]][0] = create_map_obj(r.choice(self.suitable_floors).name)
				else:
					self.map_layout[pos[0]][pos[1]] = [create_map_obj(r.choice(self.suitable_floors).name)]
				self.map_layout[pos[0]][pos[1]][0].pos = (pos[1]*tile_w, pos[0]*tile_h)

	def detect_free_floors(self):
		"""Detects and stores the free (spawnable) map tiles"""

		self.free_floors.clear()
		for row_index, row in enumerate(self.map_layout):
			for col_index, tile in enumerate(row):
				if (1 < row_index < len(self.map_layout)-1) and \
						(1 < col_index < len(self.map_layout[0])-1):      # Not at the borders
					if type(tile) == int or (len(tile) == 1 and tile[0].type == 'floor' and tile[0].spawnable):
						floor_pos = (row_index, col_index)
						self.free_floors.append(floor_pos)

	def gen_decos(self):
		"""Generates new random decorations"""

		if self.density_decos > len(self.free_floors): self.density_decos = len(self.free_floors)

		if len(self.suitable_decos) > 0:
			for deco in range(self.density_decos):
				sel_deco = create_map_obj(r.choice(self.suitable_decos).name)
				sel_pos = r.choice(self.free_floors)
				self.free_floors.remove(sel_pos)
				if type(self.map_layout[sel_pos[0]][sel_pos[1]]) == list:
					if len(self.map_layout[sel_pos[0]][sel_pos[1]]) == 1:
						self.map_layout[sel_pos[0]][sel_pos[1]].append(sel_deco)
					elif len(self.map_layout[sel_pos[0]][sel_pos[1]]) == 2:
						self.map_layout[sel_pos[0]][sel_pos[1]][1] = sel_deco

				else:
					self.map_layout[sel_pos[0]][sel_pos[1]] = [create_map_obj('blank_floor'), sel_deco]

				# Reset positions #
				self.map_layout[sel_pos[0]][sel_pos[1]][0].pos = (sel_pos[1]*tile_w, sel_pos[0]*tile_h)
				self.map_layout[sel_pos[0]][sel_pos[1]][1].pos = \
					(sel_pos[1]*tile_w+tile_w*0.5-self.map_layout[sel_pos[0]][sel_pos[1]][1].visual_rect.w*0.5,
					 sel_pos[0]*tile_h+tile_h*0.5-self.map_layout[sel_pos[0]][sel_pos[1]][1].visual_rect.h*0.5)
				self.map_layout[sel_pos[0]][sel_pos[1]][1].update_mobj('pos_change')

	def gen_containers(self):
		"""Generates new random containers"""

		if self.density_containers > len(self.free_floors): self.density_containers = len(self.free_floors)

		if len(self.suitable_containers) > 0:
			for container in range(self.density_containers):
				sel_container = create_map_obj(r.choice(self.suitable_containers).name)
				sel_pos = r.choice(self.free_floors)
				self.free_floors.remove(sel_pos)
				if type(self.map_layout[sel_pos[0]][sel_pos[1]]) == list:
					if len(self.map_layout[sel_pos[0]][sel_pos[1]]) == 1:
						self.map_layout[sel_pos[0]][sel_pos[1]].append(sel_container)
					elif len(self.map_layout[sel_pos[0]][sel_pos[1]]) == 2:
						self.map_layout[sel_pos[0]][sel_pos[1]][1] = sel_container
				else:
					self.map_layout[sel_pos[0]][sel_pos[1]] = [create_map_obj('blank_floor'), create_map_obj(sel_container.name)]

				# Reset positions #
				self.map_layout[sel_pos[0]][sel_pos[1]][0].pos = (sel_pos[1]*tile_w, sel_pos[0]*tile_h)
				self.map_layout[sel_pos[0]][sel_pos[1]][1].pos = \
					(sel_pos[1]*tile_w+tile_w*0.5-self.map_layout[sel_pos[0]][sel_pos[1]][1].visual_rect.w*0.5,
					 sel_pos[0]*tile_h+tile_h*0.5-self.map_layout[sel_pos[0]][sel_pos[1]][1].visual_rect.h*0.5)
				self.map_layout[sel_pos[0]][sel_pos[1]][1].update_mobj('pos_change')

	def gen_creatures(self, quantity):
		"""Generates new random creatures"""

		if quantity > len(self.free_floors): quantity = len(self.free_floors)

		for value in self.suitable_creatures.values():
			if value > 0:
				sel_crs = r.choices(list(self.suitable_creatures.keys()), weights=tuple(self.suitable_creatures.values()),
				                    k=quantity)

				for creature_string in sel_crs:

					# Chance to spawn the creature (%) #
					if r.randint(1, 100) <= 100:

						if len(sel_crs) > 0 and len(self.free_floors) > 0:
							sel_cr = create_creature(creature_string)
							sel_cr.gen_creature_stats(self.level)
							sel_pos = r.choice(self.free_floors)
							self.free_floors.remove(sel_pos)
							if type(self.map_layout[sel_pos[0]][sel_pos[1]]) == list:
								self.map_layout[sel_pos[0]][sel_pos[1]].insert(1, sel_cr)
							else:
								self.map_layout[sel_pos[0]][sel_pos[1]] = [create_map_obj('blank_floor'), sel_cr]

							# Reset positions #
							self.map_layout[sel_pos[0]][sel_pos[1]][0].pos = (sel_pos[1]*tile_w, sel_pos[0]*tile_h)
							self.map_layout[sel_pos[0]][sel_pos[1]][1].pos = \
								(sel_pos[1]*tile_w+tile_w*0.5-self.map_layout[sel_pos[0]][sel_pos[1]][1].visual_rect.w*0.5,
								 sel_pos[0]*tile_h+tile_h*0.5-self.map_layout[sel_pos[0]][sel_pos[1]][1].visual_rect.h*0.5)
							self.map_layout[sel_pos[0]][sel_pos[1]][1].update_cr('pos_change')

				break

	def map_setting(self):
		"""Interprets every layout map object and assigns them a position value"""

		self.suitable_mobj()

		for row_index, row in enumerate(self.map_layout):
			for col_index, tile in enumerate(row):

				# Basic and random selection and assignation #
				self.sel_floor = create_map_obj('blank_floor')
				if type(tile) != list:
					if tile == CHAR:
						sett.current_game['current_char'].pos = [
								col_index*tile_w+tile_w*0.5-sett.current_game['current_char'].visual_rect.w*0.5,
								row_index*tile_h+tile_h*0.5-sett.current_game['current_char'].visual_rect.h*0.5]
					if tile == Wall:
						if len(self.suitable_walls) > 0:
							self.sel_wall = create_map_obj(r.choice(self.suitable_walls).name)
							self.map_layout[row_index][col_index] = [self.sel_floor, self.sel_wall]
					tile = self.map_layout[row_index][col_index]

				# Specified selection and assignation #
				if type(tile) == list:
					if len(tile) == 1:
						if tile[0].type == 'floor':
							self.sel_floor = create_map_obj(tile[0].name)
							self.map_layout[row_index][col_index] = [self.sel_floor]
						elif tile[0].type == 'wall':
							self.sel_wall = create_map_obj(tile[0].name)
							self.map_layout[row_index][col_index] = [self.sel_floor, self.sel_wall]
						elif tile[0].type == 'deco':
							self.sel_deco = create_map_obj(tile[0].name)
							self.map_layout[row_index][col_index] = [self.sel_floor, self.sel_deco]
						elif tile[0].type == 'container':
							self.sel_container = create_map_obj(tile[0].name)
							self.map_layout[row_index][col_index] = [self.sel_floor, self.sel_container]
						elif tile[0].type == 'creature':
							self.sel_creature = create_creature(tile[0].name)
							self.sel_creature.gen_creature_stats(self.level)
							self.map_layout[row_index][col_index] = [self.sel_floor, self.sel_creature]
						else:
							raise ValueError(f'The map object {tile[0]} is not defined!')

					elif len(tile) == 2:
						if tile[0].type == 'floor':
							self.sel_floor = create_map_obj(tile[0].name)
							if tile[1].type == 'wall':
								self.sel_wall = create_map_obj(tile[1].name)
								self.map_layout[row_index][col_index] = [self.sel_floor, self.sel_wall]
							elif tile[1].type == 'deco':
								self.sel_deco = create_map_obj(tile[1].name)
								self.map_layout[row_index][col_index] = [self.sel_floor, self.sel_deco]
							elif tile[1].type == 'container':
								self.sel_container = create_map_obj(tile[1].name)
								self.map_layout[row_index][col_index] = [self.sel_floor, self.sel_container]
							elif tile[1].type == 'creature':
								self.sel_creature = create_creature(tile[1].name)
								self.sel_creature.gen_creature_stats(self.level)
								self.map_layout[row_index][col_index] = [self.sel_floor, self.sel_creature]
							else:
								raise ValueError('The second list element (map object {tile[1]}) is not defined!')
						else: raise ValueError('The first list element must be a floor type')

					# Tile objects positioning #
					tile = self.map_layout[row_index][col_index]
					self.map_layout[row_index][col_index][0].pos = (col_index*tile_w, row_index*tile_h)
					if len(tile) == 2:
						if tile[1].rel_pos:
							self.map_layout[row_index][col_index][1].pos = \
								(col_index*tile_w+tile[1].rel_pos[0], row_index*tile_h+tile[1].rel_pos[1])
							self.map_layout[row_index][col_index][1].depth = \
								self.map_layout[row_index][col_index][1].pos[1]+self.map_layout[row_index][col_index][1].depth
						else:
							self.map_layout[row_index][col_index][1].pos = (col_index*tile_w+tile_w*0.5-tile[1].visual_rect.w*0.5,
							                                                row_index*tile_h+tile_h*0.5-tile[1].visual_rect.h*0.5)
							if tile[1].type == 'creature': self.map_layout[row_index][col_index][1].update_cr('pos_change')
							elif tile[1].type != 'creature': self.map_layout[row_index][col_index][1].update_mobj('pos_change')

		self.gen_floors()
		self.detect_free_floors()
		self.gen_decos()
		self.gen_containers()
		self.gen_creatures(self.density_creatures)
		self.update_blocking_obj(full_check=True)

	def remove_from_map(self, i):
		"""Removes the item from the map"""

		if i.visual_rect.h > sett.tile_h: row = int((i.pos[1]+i.visual_rect.h-sett.tile_h)/sett.tile_h)
		else: row = int(i.pos[1]/sett.tile_h)
		if i.visual_rect.w > sett.tile_w: col = int((i.pos[0]+i.visual_rect.w-sett.tile_w)/sett.tile_w)
		else: col = int(i.pos[0]/sett.tile_w)
		del self.map_layout[row][col][1]

		if i.type == 'creature':
			sett.current_game['current_creature'] = None
			self.buffer_spawn.append(pg.time.get_ticks())

		if i in self.blocking_objs:
			self.blocking_objs.remove(i)

		self.detect_free_floors()

	def update_blocking_obj(self, full_check=False):
		"""Updates the blocking objects on the current map"""

		if full_check:
			self.blocking_objs = []
			for row_index, row in enumerate(self.map_layout):
				for col_index, tile in enumerate(row):
					if type(tile) == list and len(tile) == 2:
						if tile[1].given_block_rect is not None:
							self.map_layout[row_index][col_index][1].block_rect = pg.Rect(
								tile[1].pos[0]+tile[1].given_block_rect.x, tile[1].pos[1]+tile[1].given_block_rect.y,
								tile[1].given_block_rect.w, tile[1].given_block_rect.h)
							if tile[1] not in self.blocking_objs:
								self.blocking_objs.append(tile[1])

		sett.current_game['blocking_objs'] = self.blocking_objs

	def displaying_sorting(self):
		"""Sorts the displaying map objects by depth (y position)"""

		self.sorted_objects = []
		for row_index, row in enumerate(self.map_layout):
			for col_index, tile in enumerate(row):
				if type(tile) == list:
					if len(tile) == 2:
						self.sorted_objects.append(tile[1])
		self.sorted_objects = sorted(self.sorted_objects, key=attrgetter('depth'))

		char_depth = sett.current_game['current_char'].pos[1]+sett.current_game['current_char'].visual_rect.h
		for index, obj in enumerate(self.sorted_objects):
			if char_depth < obj.depth:
				self.sorted_objects.insert(index, 'char')
				break
		if 'char' not in self.sorted_objects:
			self.sorted_objects.append('char')

	def draw_floor(self):
		"""Displays the map floor"""

		for row_index, row in enumerate(self.map_layout):
			for col_index, tile in enumerate(row):
				if type(tile) == list:
					self.draw_obj(tile[0])

	@staticmethod
	def draw_obj(instance, sheet=False, crop_rect=None):
		"""Draws the given instance related image in its position"""

		if sheet:
			screen.blit(mobj_imgs[instance.name].sheet, instance.pos, crop_rect)
		else:
			try: screen.blit(mobj_imgs[instance.name], instance.pos)
			except KeyError: screen.blit(cr_imgs[instance.name], instance.pos)

	def draw_map(self):
		"""Displays the map objects in depth order"""

		self.update_blocking_obj()
		self.displaying_sorting()

		if self.full_floor is not None:
			screen.blit(mobj_imgs[self.full_floor[0].name], (0, 0))

		self.draw_floor()

		for obj in self.sorted_objects:
			if obj == 'char':
				sett.current_game['current_char'].draw_char()

			else:
				if obj.type == 'container':
					if obj.opened:
						self.draw_obj(obj, sheet=True, crop_rect=mobj_imgs[obj.name].crops[1])
					else:
						self.draw_obj(obj, sheet=True, crop_rect=mobj_imgs[obj.name].crops[0])
				else:
					self.draw_obj(obj)

		for t in self.buffer_spawn:
			if sett.timer > t + self.respawn_time:
				self.gen_creatures(1)
				self.buffer_spawn.remove(t)
				self.update_blocking_obj(full_check=True)

		# TODO Implement a basic weather system


class HerdionTown(Map):
	def __init__(self):
		super().__init__()

		self.name = 'herdion_town'
		self.level = 0
		self.map_elements = {'terrain': ['dirt'], 'climate': ['template']}
		self.full_floor = FFTf
		self.map_layout = [
				[0000, DHo1, 0000, 0000, 0000, DHo2, 0000, 0000, DHo3, 0000, 0000, 0000, 0000, 0000, 0000, 0000],       # (16 x 10)
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[DHo4, 0000, 0000, 0000, 0000, 0000, 0000, 0000, DHo5, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, DWel, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, DHo6, 0000, 0000, 0000, 0000, 0000, CHAR, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, DTow, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				]

		self.map_setting()


class HerdionTownNorth(Map):
	def __init__(self):
		super().__init__()

		self.name = 'herdion_town_north'
		self.level = 1
		self.map_elements = {'terrain': ['dirt'], 'climate': ['template']}
		self.full_floor = FFGr
		self.map_layout = [
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],       # (16 x 10)
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				]
		self.density_floors = 15
		self.density_decos = 15

		self.map_setting()


class HerdionTownSouth(Map):
	def __init__(self):
		super().__init__()

		self.name = 'herdion_town_south'
		self.level = 1
		self.map_elements = {'terrain': ['dirt'], 'climate': ['template']}
		self.full_floor = FFGr
		self.map_layout = [
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],       # (16 x 10)
				]
		self.density_floors = 15
		self.density_decos = 15

		self.map_setting()


class HerdionTownWest(Map):
	def __init__(self):
		super().__init__()

		self.name = 'herdion_town_west'
		self.level = 1
		self.map_elements = {'terrain': ['dirt'], 'climate': ['template']}
		self.full_floor = FFGr
		self.map_layout = [
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],       # (16 x 10)
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				]
		self.density_floors = 15
		self.density_decos = 15

		self.map_setting()


class HerdionTownEast(Map):
	def __init__(self):
		super().__init__()

		self.name = 'herdion_town_east'
		self.level = 1
		self.map_elements = {'terrain': ['dirt'], 'climate': ['template']}
		self.full_floor = FFGr
		self.map_layout = [
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],       # (16 x 10)
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				]
		self.density_floors = 15
		self.density_decos = 15

		self.map_setting()


class HerdionTownNorthwest(Map):
	def __init__(self):
		super().__init__()

		self.name = 'herdion_town_northwest'
		self.level = 1
		self.map_elements = {'terrain': ['dirt'], 'climate': ['template']}
		self.full_floor = FFGr
		self.map_layout = [
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],       # (16 x 10)
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				]
		self.density_floors = 15
		self.density_decos = 15
		self.density_creatures = r.randint(0, 1)

		self.map_setting()


class HerdionTownNortheast(Map):
	def __init__(self):
		super().__init__()

		self.name = 'herdion_town_northeast'
		self.level = 1
		self.map_elements = {'terrain': ['dirt'], 'climate': ['template']}
		self.full_floor = FFGr
		self.map_layout = [
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],       # (16 x 10)
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				]
		self.density_floors = 15
		self.density_decos = 15
		self.density_creatures = r.randint(0, 1)

		self.map_setting()


class HerdionTownSouthwest(Map):
	def __init__(self):
		super().__init__()

		self.name = 'herdion_town_southwest'
		self.level = 1
		self.map_elements = {'terrain': ['dirt'], 'climate': ['template']}
		self.full_floor = FFGr
		self.map_layout = [
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],       # (16 x 10)
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000],
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],
				]
		self.density_floors = 15
		self.density_decos = 15
		self.density_creatures = r.randint(0, 1)

		self.map_setting()


class HerdionTownSoutheast(Map):
	def __init__(self):
		super().__init__()

		self.name = 'herdion_town_southeast'
		self.level = 1
		self.map_elements = {'terrain': ['dirt'], 'climate': ['template']}
		self.full_floor = FFGr
		self.map_layout = [
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],       # (16 x 10)
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],
				]
		self.density_floors = 15
		self.density_decos = 15
		self.density_creatures = r.randint(0, 1)

		self.map_setting()


class AridPlains(Map):
	def __init__(self):
		super().__init__()

		self.name = 'arid_plains'
		self.level = 1
		self.map_elements = {'terrain': ['sand'], 'climate': ['arid']}
		self.full_floor = FFDe
		self.map_layout = [
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],       # (16 x 10)
				[Wall, 0000, DTr1, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, DMo2, 0000, 0000, 0000, CrRa, 0000, CrSn, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, CHAR, CoCh, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],
				]
		self.density_floors = 5
		self.density_decos = 1
		self.density_containers = 2
		self.density_creatures = 5

		self.map_setting()


class PrairieLands(Map):
	def __init__(self):
		super().__init__()

		self.name = 'prairie_lands'
		self.level = 1
		self.map_elements = {'terrain': ['dirt'], 'climate': ['template']}
		self.full_floor = FFPr
		self.map_layout = [
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],       # (16 x 10)
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, DGr1, CHAR, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],
				]
		self.density_floors = 5
		self.density_decos = 2
		self.density_containers = 2
		self.density_creatures = 5

		self.map_setting()


class ColdPlateau(Map):
	def __init__(self):
		super().__init__()

		self.name = 'ice_lands'
		self.level = 7
		self.map_elements = {'terrain': ['dirt'], 'climate': ['tundra']}
		self.full_floor = FFSn
		self.map_layout = [
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],       # (16 x 10)
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],
				]
		self.density_floors = 5
		self.density_decos = 2
		self.density_containers = 2
		self.density_creatures = 5

		self.map_setting()


class FrozenLake(Map):
	def __init__(self):
		super().__init__()

		self.name = 'frozen_lake'
		self.level = 8
		self.map_elements = {'terrain': ['rock'], 'climate': ['tundra']}
		self.full_floor = FFIc
		self.map_layout = [
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],       # (16 x 10)
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, Wall],
				[Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall, Wall],
				]
		self.density_floors = 5
		self.density_decos = 2
		self.density_containers = 2
		self.density_creatures = 5

		self.map_setting()


ArPl = AridPlains()
PrLa = PrairieLands()
CoPl = ColdPlateau()
FrLa = FrozenLake()
HeTo = HerdionTown()
HeTN, HeTS, HeTW, HeTE, HTNW, HTNE, HTSW, HTSE = \
	HerdionTownNorth(), HerdionTownSouth(), HerdionTownWest(), HerdionTownEast(), \
	HerdionTownNorthwest(), HerdionTownNortheast(), HerdionTownSouthwest(), HerdionTownSoutheast()

sett.current_game['current_map'] = HeTE
